{"ast":null,"code":"import _objectSpread from \"C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nvar fixOutMode = function fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  var diameter = data.radius * 2;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n};\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    var _this = this;\n    _classCallCheck(this, Particle);\n    this.container = container;\n    this._calcPosition = function (container, position, zIndex) {\n      var _outModes$left, _outModes$right, _outModes$top, _outModes$bottom;\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, _this) : undefined;\n          if (pluginPos) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = _this.getRadius(),\n        outModes = _this.options.move.outModes,\n        fixHorizontal = function fixHorizontal(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-horizontal\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: function setCb(value) {\n              return pos.x += value;\n            },\n            radius: radius\n          });\n        },\n        fixVertical = function fixVertical(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-vertical\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: function setCb(value) {\n              return pos.y += value;\n            },\n            radius: radius\n          });\n        };\n      fixHorizontal((_outModes$left = outModes.left) !== null && _outModes$left !== void 0 ? _outModes$left : outModes.default);\n      fixHorizontal((_outModes$right = outModes.right) !== null && _outModes$right !== void 0 ? _outModes$right : outModes.default);\n      fixVertical((_outModes$top = outModes.top) !== null && _outModes$top !== void 0 ? _outModes$top : outModes.default);\n      fixVertical((_outModes$bottom = outModes.bottom) !== null && _outModes$bottom !== void 0 ? _outModes$bottom : outModes.default);\n      if (_this._checkOverlap(pos, tryCount)) {\n        return _this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    };\n    this._calculateVelocity = function () {\n      var baseVelocity = getParticleBaseVelocity(_this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = _this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n        radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n        range = {\n          left: radOffset - rad / 2,\n          right: radOffset + rad / 2\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = function (pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = _this.options.collisions,\n        radius = _this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      var overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      var retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"\".concat(errorPrefix, \" particle is overlapping and can't be placed\"));\n      }\n      return !!_this.container.particles.find(function (particle) {\n        return getDistance(pos, particle.position) < radius + particle.getRadius();\n      });\n    };\n    this._getRollColor = function (color) {\n      var _this$roll$angle;\n      if (!color || !_this.roll || !_this.backColor && !_this.roll.alter) {\n        return color;\n      }\n      var backFactor = _this.roll.horizontal && _this.roll.vertical ? 2 : 1,\n        backSum = _this.roll.horizontal ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_this$roll$angle = _this.roll.angle) !== null && _this$roll$angle !== void 0 ? _this$roll$angle : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (!rolled) {\n        return color;\n      }\n      if (_this.backColor) {\n        return _this.backColor;\n      }\n      if (_this.roll.alter) {\n        return alterHsl(color, _this.roll.alter.type, _this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = function (position) {\n      var _this$options$move$ce, _this$options$move$ce2;\n      var container = _this.container,\n        zIndexValue = getRangeValue(_this.options.zIndex.value);\n      _this.position = _this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      _this.initialPosition = _this.position.copy();\n      var canvasSize = container.canvas.size;\n      _this.moveCenter = _objectSpread(_objectSpread({}, getPosition(_this.options.move.center, canvasSize)), {}, {\n        radius: (_this$options$move$ce = _this.options.move.center.radius) !== null && _this$options$move$ce !== void 0 ? _this$options$move$ce : 0,\n        mode: (_this$options$move$ce2 = _this.options.move.center.mode) !== null && _this$options$move$ce2 !== void 0 ? _this$options$move$ce2 : \"percent\"\n      });\n      _this.direction = getParticleDirectionAngle(_this.options.move.direction, _this.position, _this.moveCenter);\n      switch (_this.options.move.direction) {\n        case \"inside\":\n          _this.outType = \"inside\";\n          break;\n        case \"outside\":\n          _this.outType = \"outside\";\n          break;\n      }\n      _this.offset = Vector.origin;\n    };\n    this._loadShapeData = function (shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[_this.shape];\n      if (!shapeData) {\n        return;\n      }\n      return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill\n      }, itemFromSingleOrMultiple(shapeData, _this.id, reduceDuplicates));\n    };\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  _createClass(Particle, [{\n    key: \"destroy\",\n    value: function destroy(override) {\n      if (this.unbreakable || this.destroyed) {\n        return;\n      }\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.slow.inRange = false;\n      var container = this.container,\n        pathGenerator = this.pathGenerator;\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(container.particles.updaters),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var updater = _step3.value;\n          if (updater.particleDestroyed) {\n            updater.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (pathGenerator) {\n        pathGenerator.reset(this);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n            plugin = _step4$value[1];\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _this$bubble$color;\n      return this._getRollColor((_this$bubble$color = this.bubble.color) !== null && _this$bubble$color !== void 0 ? _this$bubble$color : getHslFromAnimation(this.color));\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _this$bubble$radius;\n      return (_this$bubble$radius = this.bubble.radius) !== null && _this$bubble$radius !== void 0 ? _this$bubble$radius : this.size.value;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _this$bubble$color2;\n      return this._getRollColor((_this$bubble$color2 = this.bubble.color) !== null && _this$bubble$color2 !== void 0 ? _this$bubble$color2 : getHslFromAnimation(this.strokeColor));\n    }\n  }, {\n    key: \"init\",\n    value: function init(id, position, overrideOptions, group) {\n      var _shapeData$fill, _shapeData$close, _drawer;\n      var container = this.container,\n        engine = this._engine;\n      this.id = id;\n      this.group = group;\n      this.fill = true;\n      this.pathRotation = false;\n      this.close = true;\n      this.lastPathTime = 0;\n      this.destroyed = false;\n      this.unbreakable = false;\n      this.rotation = 0;\n      this.misplaced = false;\n      this.retina = {\n        maxDistance: {}\n      };\n      this.outType = \"normal\";\n      this.ignoresResizeRatio = true;\n      var pxRatio = container.retina.pixelRatio,\n        mainOptions = container.actualOptions,\n        particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n        shapeType = particlesOptions.shape.type,\n        reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n      var shapeOptions = particlesOptions.shape;\n      if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n      this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      particlesOptions.load(overrideOptions);\n      var shapeData = this.shapeData;\n      if (shapeData) {\n        particlesOptions.load(shapeData.particles);\n      }\n      var interactivity = new Interactivity(engine, container);\n      interactivity.load(container.actualOptions.interactivity);\n      interactivity.load(particlesOptions.interactivity);\n      this.interactivity = interactivity;\n      this.fill = (_shapeData$fill = shapeData === null || shapeData === void 0 ? void 0 : shapeData.fill) !== null && _shapeData$fill !== void 0 ? _shapeData$fill : particlesOptions.shape.fill;\n      this.close = (_shapeData$close = shapeData === null || shapeData === void 0 ? void 0 : shapeData.close) !== null && _shapeData$close !== void 0 ? _shapeData$close : particlesOptions.shape.close;\n      this.options = particlesOptions;\n      var pathOptions = this.options.move.path;\n      this.pathDelay = getValue(pathOptions.delay) * 1000;\n      if (pathOptions.generator) {\n        this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n        if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n          this.pathGenerator.init(container);\n        }\n      }\n      container.retina.initParticle(this);\n      this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n      this.bubble = {\n        inRange: false\n      };\n      this.slow = {\n        inRange: false,\n        factor: 1\n      };\n      this._initPosition(position);\n      this.initialVelocity = this._calculateVelocity();\n      this.velocity = this.initialVelocity.copy();\n      this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n      var particles = container.particles;\n      particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n      particles.lastZIndex = this.position.z;\n      this.zIndexFactor = this.position.z / container.zLayers;\n      this.sides = 24;\n      var drawer = container.drawers.get(this.shape);\n      if (!drawer) {\n        drawer = this._engine.plugins.getShapeDrawer(this.shape);\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n      if (drawer && drawer.loadShape) {\n        drawer.loadShape(this);\n      }\n      var sideCountFunc = (_drawer = drawer) === null || _drawer === void 0 ? void 0 : _drawer.getSidesCount;\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n      this.spawning = false;\n      this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n      var _iterator5 = _createForOfIteratorHelper(container.particles.updaters),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var updater = _step5.value;\n          updater.init(this);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      var _iterator6 = _createForOfIteratorHelper(container.particles.movers),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var mover = _step6.value;\n          mover.init && mover.init(this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      if (drawer && drawer.particleInit) {\n        drawer.particleInit(container, this);\n      }\n      var _iterator7 = _createForOfIteratorHelper(container.plugins),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            plugin = _step7$value[1];\n          plugin.particleCreated && plugin.particleCreated(this);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n        canvasSize = this.container.canvas.size,\n        position = this.position;\n      return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _iterator8 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var updater = _step8.value;\n          updater.reset && updater.reset(this);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }]);\n  return Particle;\n}();","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","errorPrefix","loadParticlesOptions","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","engine","id","container","position","overrideOptions","group","_this","_classCallCheck","_calcPosition","zIndex","_outModes$left","_outModes$right","_outModes$top","_outModes$bottom","tryCount","arguments","length","undefined","_iterator","_createForOfIteratorHelper","plugins","_step","s","n","done","_step$value","_slicedToArray","value","plugin","pluginPos","particlePosition","create","x","y","err","e","f","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","options","move","fixHorizontal","width","fixVertical","height","left","default","right","top","bottom","_checkOverlap","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","rad","Math","PI","angle","radOffset","offset","range","straight","random","speed","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","concat","particles","find","particle","_getRollColor","color","_this$roll$angle","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor","type","_initPosition","_this$options$move$ce","_this$options$move$ce2","zIndexValue","zLayers","initialPosition","moveCenter","_objectSpread","center","mode","outType","origin","_loadShapeData","shapeOptions","reduceDuplicates","shapeData","shape","close","fill","_engine","init","_createClass","key","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","_iterator2","_step2","_step2$value","particleDestroyed","_iterator3","updaters","_step3","updater","reset","draw","delta","_iterator4","_step4","_step4$value","drawParticlePlugin","drawParticle","getFillColor","_this$bubble$color","getMass","pow","z","_this$bubble$radius","getStrokeColor","_this$bubble$color2","strokeColor","_shapeData$fill","_shapeData$close","_drawer","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","overrideShapeType","load","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","moveDecay","decay","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","_iterator5","_step5","_iterator6","movers","_step6","mover","particleInit","_iterator7","_step7","_step7$value","particleCreated","isInsideCanvas","isVisible","_iterator8","_step8"],"sources":["C:/Users/Administrator/Documents/ClaimCracker-1.0/ClaimCracker/frontend/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\r\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils\";\r\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\r\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\r\nimport { Vector } from \"./Utils/Vector\";\r\nimport { Vector3d } from \"./Utils/Vector3d\";\r\nimport { alterHsl } from \"../Utils/CanvasUtils\";\r\nimport { errorPrefix } from \"./Utils/Constants\";\r\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\r\nconst fixOutMode = (data) => {\r\n    if (!isInArray(data.outMode, data.checkModes)) {\r\n        return;\r\n    }\r\n    const diameter = data.radius * 2;\r\n    if (data.coord > data.maxCoord - diameter) {\r\n        data.setCb(-data.radius);\r\n    }\r\n    else if (data.coord < diameter) {\r\n        data.setCb(data.radius);\r\n    }\r\n};\r\nexport class Particle {\r\n    constructor(engine, id, container, position, overrideOptions, group) {\r\n        this.container = container;\r\n        this._calcPosition = (container, position, zIndex, tryCount = 0) => {\r\n            for (const [, plugin] of container.plugins) {\r\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\r\n                if (pluginPos) {\r\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\r\n                }\r\n            }\r\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\r\n                size: canvasSize,\r\n                position: position,\r\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\r\n                fixOutMode({\r\n                    outMode,\r\n                    checkModes: [\"bounce\", \"bounce-horizontal\"],\r\n                    coord: pos.x,\r\n                    maxCoord: container.canvas.size.width,\r\n                    setCb: (value) => (pos.x += value),\r\n                    radius,\r\n                });\r\n            }, fixVertical = (outMode) => {\r\n                fixOutMode({\r\n                    outMode,\r\n                    checkModes: [\"bounce\", \"bounce-vertical\"],\r\n                    coord: pos.y,\r\n                    maxCoord: container.canvas.size.height,\r\n                    setCb: (value) => (pos.y += value),\r\n                    radius,\r\n                });\r\n            };\r\n            fixHorizontal(outModes.left ?? outModes.default);\r\n            fixHorizontal(outModes.right ?? outModes.default);\r\n            fixVertical(outModes.top ?? outModes.default);\r\n            fixVertical(outModes.bottom ?? outModes.default);\r\n            if (this._checkOverlap(pos, tryCount)) {\r\n                return this._calcPosition(container, undefined, zIndex, tryCount + 1);\r\n            }\r\n            return pos;\r\n        };\r\n        this._calculateVelocity = () => {\r\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\r\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\r\n                return res;\r\n            }\r\n            const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\r\n                left: radOffset - rad / 2,\r\n                right: radOffset + rad / 2,\r\n            };\r\n            if (!moveOptions.straight) {\r\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\r\n            }\r\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\r\n                res.length *= getRandom();\r\n            }\r\n            return res;\r\n        };\r\n        this._checkOverlap = (pos, tryCount = 0) => {\r\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\r\n            if (!collisionsOptions.enable) {\r\n                return false;\r\n            }\r\n            const overlapOptions = collisionsOptions.overlap;\r\n            if (overlapOptions.enable) {\r\n                return false;\r\n            }\r\n            const retries = overlapOptions.retries;\r\n            if (retries >= 0 && tryCount > retries) {\r\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\r\n            }\r\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\r\n        };\r\n        this._getRollColor = (color) => {\r\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\r\n                return color;\r\n            }\r\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor(((this.roll.angle ?? 0) + backSum) / (Math.PI / backFactor)) % 2;\r\n            if (!rolled) {\r\n                return color;\r\n            }\r\n            if (this.backColor) {\r\n                return this.backColor;\r\n            }\r\n            if (this.roll.alter) {\r\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\r\n            }\r\n            return color;\r\n        };\r\n        this._initPosition = (position) => {\r\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\r\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\r\n            this.initialPosition = this.position.copy();\r\n            const canvasSize = container.canvas.size;\r\n            this.moveCenter = {\r\n                ...getPosition(this.options.move.center, canvasSize),\r\n                radius: this.options.move.center.radius ?? 0,\r\n                mode: this.options.move.center.mode ?? \"percent\",\r\n            };\r\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\r\n            switch (this.options.move.direction) {\r\n                case \"inside\":\r\n                    this.outType = \"inside\";\r\n                    break;\r\n                case \"outside\":\r\n                    this.outType = \"outside\";\r\n                    break;\r\n            }\r\n            this.offset = Vector.origin;\r\n        };\r\n        this._loadShapeData = (shapeOptions, reduceDuplicates) => {\r\n            const shapeData = shapeOptions.options[this.shape];\r\n            if (!shapeData) {\r\n                return;\r\n            }\r\n            return deepExtend({\r\n                close: shapeOptions.close,\r\n                fill: shapeOptions.fill,\r\n            }, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\r\n        };\r\n        this._engine = engine;\r\n        this.init(id, position, overrideOptions, group);\r\n    }\r\n    destroy(override) {\r\n        if (this.unbreakable || this.destroyed) {\r\n            return;\r\n        }\r\n        this.destroyed = true;\r\n        this.bubble.inRange = false;\r\n        this.slow.inRange = false;\r\n        const container = this.container, pathGenerator = this.pathGenerator;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particleDestroyed) {\r\n                plugin.particleDestroyed(this, override);\r\n            }\r\n        }\r\n        for (const updater of container.particles.updaters) {\r\n            if (updater.particleDestroyed) {\r\n                updater.particleDestroyed(this, override);\r\n            }\r\n        }\r\n        if (pathGenerator) {\r\n            pathGenerator.reset(this);\r\n        }\r\n    }\r\n    draw(delta) {\r\n        const container = this.container;\r\n        for (const [, plugin] of container.plugins) {\r\n            container.canvas.drawParticlePlugin(plugin, this, delta);\r\n        }\r\n        container.canvas.drawParticle(this, delta);\r\n    }\r\n    getFillColor() {\r\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\r\n    }\r\n    getMass() {\r\n        return (this.getRadius() ** 2 * Math.PI) / 2;\r\n    }\r\n    getPosition() {\r\n        return {\r\n            x: this.position.x + this.offset.x,\r\n            y: this.position.y + this.offset.y,\r\n            z: this.position.z,\r\n        };\r\n    }\r\n    getRadius() {\r\n        return this.bubble.radius ?? this.size.value;\r\n    }\r\n    getStrokeColor() {\r\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\r\n    }\r\n    init(id, position, overrideOptions, group) {\r\n        const container = this.container, engine = this._engine;\r\n        this.id = id;\r\n        this.group = group;\r\n        this.fill = true;\r\n        this.pathRotation = false;\r\n        this.close = true;\r\n        this.lastPathTime = 0;\r\n        this.destroyed = false;\r\n        this.unbreakable = false;\r\n        this.rotation = 0;\r\n        this.misplaced = false;\r\n        this.retina = {\r\n            maxDistance: {},\r\n        };\r\n        this.outType = \"normal\";\r\n        this.ignoresResizeRatio = true;\r\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\r\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\r\n        const shapeOptions = particlesOptions.shape;\r\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\r\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\r\n            if (shape) {\r\n                this.shape = shape;\r\n                shapeOptions.load(overrideOptions.shape);\r\n            }\r\n        }\r\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\r\n        particlesOptions.load(overrideOptions);\r\n        const shapeData = this.shapeData;\r\n        if (shapeData) {\r\n            particlesOptions.load(shapeData.particles);\r\n        }\r\n        const interactivity = new Interactivity(engine, container);\r\n        interactivity.load(container.actualOptions.interactivity);\r\n        interactivity.load(particlesOptions.interactivity);\r\n        this.interactivity = interactivity;\r\n        this.fill = shapeData?.fill ?? particlesOptions.shape.fill;\r\n        this.close = shapeData?.close ?? particlesOptions.shape.close;\r\n        this.options = particlesOptions;\r\n        const pathOptions = this.options.move.path;\r\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\r\n        if (pathOptions.generator) {\r\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\r\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\r\n                this.pathGenerator.init(container);\r\n            }\r\n        }\r\n        container.retina.initParticle(this);\r\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\r\n        this.bubble = {\r\n            inRange: false,\r\n        };\r\n        this.slow = {\r\n            inRange: false,\r\n            factor: 1,\r\n        };\r\n        this._initPosition(position);\r\n        this.initialVelocity = this._calculateVelocity();\r\n        this.velocity = this.initialVelocity.copy();\r\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\r\n        const particles = container.particles;\r\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\r\n        particles.lastZIndex = this.position.z;\r\n        this.zIndexFactor = this.position.z / container.zLayers;\r\n        this.sides = 24;\r\n        let drawer = container.drawers.get(this.shape);\r\n        if (!drawer) {\r\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\r\n            if (drawer) {\r\n                container.drawers.set(this.shape, drawer);\r\n            }\r\n        }\r\n        if (drawer && drawer.loadShape) {\r\n            drawer.loadShape(this);\r\n        }\r\n        const sideCountFunc = drawer?.getSidesCount;\r\n        if (sideCountFunc) {\r\n            this.sides = sideCountFunc(this);\r\n        }\r\n        this.spawning = false;\r\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\r\n        for (const updater of container.particles.updaters) {\r\n            updater.init(this);\r\n        }\r\n        for (const mover of container.particles.movers) {\r\n            mover.init && mover.init(this);\r\n        }\r\n        if (drawer && drawer.particleInit) {\r\n            drawer.particleInit(container, this);\r\n        }\r\n        for (const [, plugin] of container.plugins) {\r\n            plugin.particleCreated && plugin.particleCreated(this);\r\n        }\r\n    }\r\n    isInsideCanvas() {\r\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\r\n        return (position.x >= -radius &&\r\n            position.y >= -radius &&\r\n            position.y <= canvasSize.height + radius &&\r\n            position.x <= canvasSize.width + radius);\r\n    }\r\n    isVisible() {\r\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\r\n    }\r\n    reset() {\r\n        for (const updater of this.container.particles.updaters) {\r\n            updater.reset && updater.reset(this);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}